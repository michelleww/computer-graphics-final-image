// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_light_1;
uniform bool is_light_2;
uniform bool is_light_3;
uniform bool is_light_4;
uniform bool is_light_5;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model,
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  pos_fs_in = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);
  sphere_fs_in = normalize(pos_fs_in.xyz);
  mat4 model = model(is_light_1, is_light_2, is_light_3, is_light_4, is_light_5, animation_seconds);

  vec3 t = vec3(0, 0, 0);
  // is_light_4 and is_light_5 are meant to add some shining effects.
  if (is_light_1) {
    t = vec3(11.0, -7.5, -3.5);
  }
  else if (is_light_2) {
    t = vec3(4.0, -6.0, 3.5);
  }
  else if (is_light_3) {
    t = vec3(10.0, -6.0, -3.5);
  }
  else if (is_light_4) {
    t = vec3(10.75, -6.0, -3.5);
  }
  else if (is_light_5){
    t = vec3(4.25, -6.5, 3.5);
  }

  mat4 shift = translate(t);
  
  // using sphere_fs_in
  view_pos_fs_in = view * model * (vec4(sphere_fs_in, 1.0) * shift);
  // using view_pos_fs_in
  pos_fs_in = proj * view_pos_fs_in;

  normal_fs_in = normalize((inverse(shift) * transpose(inverse(view * model)) * vec4(sphere_fs_in, 1.0)).xyz);
  gl_Position = pos_fs_in;
  /////////////////////////////////////////////////////////////////////////////
}
